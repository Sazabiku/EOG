# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import API_pb2 as API__pb2


class EOGStub(object):
    """python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. API.proto

    (подсказки: https://github.com/gooooloo/grpc-file-transfer/tree/master)

    Фукнции запроса к приложению и возращения данных клиенту
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GET_BY_NAME = channel.unary_unary(
                '/eog.EOG/GET_BY_NAME',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_NUM = channel.unary_unary(
                '/eog.EOG/GET_BY_NUM',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_CAR = channel.unary_unary(
                '/eog.EOG/GET_BY_CAR',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_SM = channel.unary_unary(
                '/eog.EOG/GET_BY_SM',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_EMAIL = channel.unary_unary(
                '/eog.EOG/GET_BY_EMAIL',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_ADR = channel.unary_unary(
                '/eog.EOG/GET_BY_ADR',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_CAD = channel.unary_unary(
                '/eog.EOG/GET_BY_CAD',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_CPNY = channel.unary_unary(
                '/eog.EOG/GET_BY_CPNY',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_INN = channel.unary_unary(
                '/eog.EOG/GET_BY_INN',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.GET_BY_SNILS = channel.unary_unary(
                '/eog.EOG/GET_BY_SNILS',
                request_serializer=API__pb2.SearchInput.SerializeToString,
                response_deserializer=API__pb2.Response.FromString,
                )
        self.SEND_LOGIN = channel.unary_unary(
                '/eog.EOG/SEND_LOGIN',
                request_serializer=API__pb2.LoginInfo.SerializeToString,
                response_deserializer=API__pb2.ResponseSuccess.FromString,
                )
        self.SEND_CODE = channel.unary_unary(
                '/eog.EOG/SEND_CODE',
                request_serializer=API__pb2.ConfirmCode.SerializeToString,
                response_deserializer=API__pb2.ResponseSuccess.FromString,
                )


class EOGServicer(object):
    """python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. API.proto

    (подсказки: https://github.com/gooooloo/grpc-file-transfer/tree/master)

    Фукнции запроса к приложению и возращения данных клиенту
    """

    def GET_BY_NAME(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_NUM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_CAR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_SM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_EMAIL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_ADR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_CAD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_CPNY(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_INN(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BY_SNILS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SEND_LOGIN(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SEND_CODE(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EOGServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GET_BY_NAME': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_NAME,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_NUM': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_NUM,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_CAR': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_CAR,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_SM': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_SM,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_EMAIL': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_EMAIL,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_ADR': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_ADR,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_CAD': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_CAD,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_CPNY': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_CPNY,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_INN': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_INN,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'GET_BY_SNILS': grpc.unary_unary_rpc_method_handler(
                    servicer.GET_BY_SNILS,
                    request_deserializer=API__pb2.SearchInput.FromString,
                    response_serializer=API__pb2.Response.SerializeToString,
            ),
            'SEND_LOGIN': grpc.unary_unary_rpc_method_handler(
                    servicer.SEND_LOGIN,
                    request_deserializer=API__pb2.LoginInfo.FromString,
                    response_serializer=API__pb2.ResponseSuccess.SerializeToString,
            ),
            'SEND_CODE': grpc.unary_unary_rpc_method_handler(
                    servicer.SEND_CODE,
                    request_deserializer=API__pb2.ConfirmCode.FromString,
                    response_serializer=API__pb2.ResponseSuccess.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'eog.EOG', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EOG(object):
    """python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. API.proto

    (подсказки: https://github.com/gooooloo/grpc-file-transfer/tree/master)

    Фукнции запроса к приложению и возращения данных клиенту
    """

    @staticmethod
    def GET_BY_NAME(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_NAME',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_NUM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_NUM',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_CAR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_CAR',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_SM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_SM',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_EMAIL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_EMAIL',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_ADR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_ADR',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_CAD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_CAD',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_CPNY(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_CPNY',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_INN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_INN',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BY_SNILS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET_BY_SNILS',
            API__pb2.SearchInput.SerializeToString,
            API__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SEND_LOGIN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/SEND_LOGIN',
            API__pb2.LoginInfo.SerializeToString,
            API__pb2.ResponseSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SEND_CODE(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/SEND_CODE',
            API__pb2.ConfirmCode.SerializeToString,
            API__pb2.ResponseSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
