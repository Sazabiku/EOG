# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import API_pb2 as API__pb2


class EOGStub(object):
    """Отсутствует передача файлов, возможно добавить позже (подсказки: https://github.com/gooooloo/grpc-file-transfer/tree/master)

    Фукнции запроса к приложению и возращения данных клиенту
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GET = channel.unary_unary(
                '/eog.EOG/GET',
                request_serializer=API__pb2.SearchInfo.SerializeToString,
                response_deserializer=API__pb2.SearchResults.FromString,
                )
        self.GET_RESSTREAM = channel.unary_stream(
                '/eog.EOG/GET_RESSTREAM',
                request_serializer=API__pb2.SearchInfo.SerializeToString,
                response_deserializer=API__pb2.Persona.FromString,
                )
        self.GET_BISTREAM = channel.stream_stream(
                '/eog.EOG/GET_BISTREAM',
                request_serializer=API__pb2.SearchSlice.SerializeToString,
                response_deserializer=API__pb2.Persona.FromString,
                )
        self.LOGIN = channel.unary_unary(
                '/eog.EOG/LOGIN',
                request_serializer=API__pb2.LoginInfo.SerializeToString,
                response_deserializer=API__pb2.ResponseSuccess.FromString,
                )
        self.SEND_CODE = channel.unary_unary(
                '/eog.EOG/SEND_CODE',
                request_serializer=API__pb2.ConfirmCode.SerializeToString,
                response_deserializer=API__pb2.ResponseSuccess.FromString,
                )


class EOGServicer(object):
    """Отсутствует передача файлов, возможно добавить позже (подсказки: https://github.com/gooooloo/grpc-file-transfer/tree/master)

    Фукнции запроса к приложению и возращения данных клиенту
    """

    def GET(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_RESSTREAM(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GET_BISTREAM(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LOGIN(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SEND_CODE(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EOGServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GET': grpc.unary_unary_rpc_method_handler(
                    servicer.GET,
                    request_deserializer=API__pb2.SearchInfo.FromString,
                    response_serializer=API__pb2.SearchResults.SerializeToString,
            ),
            'GET_RESSTREAM': grpc.unary_stream_rpc_method_handler(
                    servicer.GET_RESSTREAM,
                    request_deserializer=API__pb2.SearchInfo.FromString,
                    response_serializer=API__pb2.Persona.SerializeToString,
            ),
            'GET_BISTREAM': grpc.stream_stream_rpc_method_handler(
                    servicer.GET_BISTREAM,
                    request_deserializer=API__pb2.SearchSlice.FromString,
                    response_serializer=API__pb2.Persona.SerializeToString,
            ),
            'LOGIN': grpc.unary_unary_rpc_method_handler(
                    servicer.LOGIN,
                    request_deserializer=API__pb2.LoginInfo.FromString,
                    response_serializer=API__pb2.ResponseSuccess.SerializeToString,
            ),
            'SEND_CODE': grpc.unary_unary_rpc_method_handler(
                    servicer.SEND_CODE,
                    request_deserializer=API__pb2.ConfirmCode.FromString,
                    response_serializer=API__pb2.ResponseSuccess.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'eog.EOG', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EOG(object):
    """Отсутствует передача файлов, возможно добавить позже (подсказки: https://github.com/gooooloo/grpc-file-transfer/tree/master)

    Фукнции запроса к приложению и возращения данных клиенту
    """

    @staticmethod
    def GET(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/GET',
            API__pb2.SearchInfo.SerializeToString,
            API__pb2.SearchResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_RESSTREAM(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/eog.EOG/GET_RESSTREAM',
            API__pb2.SearchInfo.SerializeToString,
            API__pb2.Persona.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GET_BISTREAM(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/eog.EOG/GET_BISTREAM',
            API__pb2.SearchSlice.SerializeToString,
            API__pb2.Persona.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LOGIN(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/LOGIN',
            API__pb2.LoginInfo.SerializeToString,
            API__pb2.ResponseSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SEND_CODE(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/eog.EOG/SEND_CODE',
            API__pb2.ConfirmCode.SerializeToString,
            API__pb2.ResponseSuccess.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
